name: "CodeQL Security Analysis"

on:
  push:
    branches: [ "main", "develop" ]
  pull_request:
    branches: [ "main" ]
  schedule:
    # Run security scan daily at 3 AM UTC
    - cron: '0 3 * * *'
  workflow_dispatch:

jobs:
  analyze:
    name: Analyze
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: [ 'javascript', 'typescript' ]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}
        queries: security-and-quality

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: |
        npm ci
        cd backend && npm ci

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:${{matrix.language}}"

    - name: Upload CodeQL results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: codeql-results-${{ matrix.language }}
        path: ../results

  security-scan:
    name: Security Vulnerability Scan
    runs-on: ubuntu-latest
    needs: analyze
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: |
        npm ci
        cd backend && npm ci

    - name: Run security audit
      run: |
        echo "üîí Running comprehensive security audit..."
        
        # Frontend security audit
        npm audit --audit-level=moderate --json > frontend-audit.json || true
        
        # Backend security audit
        cd backend
        npm audit --audit-level=moderate --json > ../backend-audit.json || true
        cd ..
        
        # Check for known vulnerabilities
        npm audit --audit-level=high || true
        cd backend && npm audit --audit-level=high || true

    - name: Create security report
      run: |
        echo "üìä Creating security vulnerability report..."
        
        # Parse audit results and create report
        cat > security-report.md << EOF
        # üîí Security Vulnerability Report
        
        Generated: $(date)
        
        ## Frontend Dependencies
        EOF
        
        if [ -f frontend-audit.json ]; then
          VULNERABILITIES=$(jq '.vulnerabilities | length' frontend-audit.json 2>/dev/null || echo "0")
          echo "- **Vulnerabilities Found**: $VULNERABILITIES" >> security-report.md
          
          if [ "$VULNERABILITIES" -gt 0 ]; then
            echo "### Critical Issues:" >> security-report.md
            jq -r '.vulnerabilities | to_entries[] | select(.value.severity == "critical") | "- **\(.key)**: \(.value.overview)"' frontend-audit.json >> security-report.md 2>/dev/null || true
          fi
        fi
        
        echo "" >> security-report.md
        echo "## Backend Dependencies" >> security-report.md
        
        if [ -f backend-audit.json ]; then
          VULNERABILITIES=$(jq '.vulnerabilities | length' backend-audit.json 2>/dev/null || echo "0")
          echo "- **Vulnerabilities Found**: $VULNERABILITIES" >> security-report.md
          
          if [ "$VULNERABILITIES" -gt 0 ]; then
            echo "### Critical Issues:" >> security-report.md
            jq -r '.vulnerabilities | to_entries[] | select(.value.severity == "critical") | "- **\(.key)**: \(.value.overview)"' backend-audit.json >> security-report.md 2>/dev/null || true
          fi
        fi
        
        echo "" >> security-report.md
        echo "## üö® Action Required" >> security-report.md
        echo "- [ ] Review critical vulnerabilities" >> security-report.md
        echo "- [ ] Update vulnerable dependencies" >> security-report.md
        echo "- [ ] Test after updates" >> security-report.md
        echo "- [ ] Deploy security patches" >> security-report.md

    - name: Create security issue if vulnerabilities found
      uses: actions/github-script@v7
      if: always()
      with:
        script: |
          const fs = require('fs');
          
          // Check if there are any vulnerabilities
          let hasVulnerabilities = false;
          
          try {
            const frontendAudit = JSON.parse(fs.readFileSync('frontend-audit.json', 'utf8'));
            const backendAudit = JSON.parse(fs.readFileSync('backend-audit.json', 'utf8'));
            
            const frontendVulns = Object.keys(frontendAudit.vulnerabilities || {}).length;
            const backendVulns = Object.keys(backendAudit.vulnerabilities || {}).length;
            
            hasVulnerabilities = frontendVulns > 0 || backendVulns > 0;
          } catch (error) {
            console.log('Could not parse audit files:', error.message);
          }
          
          if (hasVulnerabilities) {
            const securityReport = fs.readFileSync('security-report.md', 'utf8');
            
            const title = `üîí Security Vulnerabilities Detected - ${new Date().toISOString().split('T')[0]}`;
            const body = securityReport + `
            
            ## ü§ñ Auto-generated by Security Bot
            This issue was automatically created by the CodeQL security analysis workflow.
            `;
            
            // Check if similar issue already exists
            const { data: issues } = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: 'security,automated'
            });
            
            const today = new Date().toISOString().split('T')[0];
            const existingIssue = issues.find(issue => 
              issue.title.includes(today) && issue.labels.some(label => label.name === 'security')
            );
            
            if (!existingIssue) {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: title,
                body: body,
                labels: ['security', 'automated', 'priority-critical']
              });
              console.log('‚úÖ Created new security vulnerability issue');
            } else {
              console.log('‚ÑπÔ∏è Similar security issue already exists, updating...');
              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: existingIssue.number,
                body: body
              });
            }
          } else {
            console.log('‚úÖ No security vulnerabilities found');
          }

    - name: Upload security reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports-${{ github.run_number }}
        path: |
          security-report.md
          frontend-audit.json
          backend-audit.json
