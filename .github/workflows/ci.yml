name: CI/CD Pipeline

permissions:
  contents: read
  id-token: write

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  NODE_VERSION: '20'
  PYTHON_VERSION: '3.11'
  AZURE_FUNCTIONAPP_NAME: 'func-tcdynamics-contact'
  AZURE_FUNCTIONAPP_PACKAGE_PATH: './TCDynamics'
  FRONTEND_BUILD_PATH: './dist'

jobs:
  # Test and Coverage for Frontend
  test-frontend:
    name: Test React Frontend
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint
        continue-on-error: true

      - name: Run type checking
        run: npm run type-check

      - name: Run tests with coverage
        run: npm run test:coverage

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: frontend-coverage
          path: |
            coverage/lcov.info
            coverage/coverage-final.json
          retention-days: 7

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage/lcov.info
          flags: frontend
          name: frontend-coverage
        continue-on-error: true

      - name: Build frontend
        run: npm run build
        env:
          VITE_AZURE_FUNCTIONS_URL: https://func-tcdynamics-contact.azurewebsites.net/api

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: ${{ env.FRONTEND_BUILD_PATH }}
          retention-days: 1

  # Test Azure Functions with pytest
  test-functions:
    name: Test Azure Functions
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./TCDynamics

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install --no-cache-dir -r requirements.txt -c constraints.txt
          pip install pytest pytest-cov pytest-asyncio

      - name: Run Python linting
        run: |
          pip install flake8
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        continue-on-error: true

      - name: Create test configuration
        run: |
          cat > local.settings.json << EOF
          {
            "IsEncrypted": false,
            "Values": {
              "FUNCTIONS_WORKER_RUNTIME": "python",
              "AzureWebJobsStorage": "UseDevelopmentStorage=true",
              "ZOHO_EMAIL": "test@example.com",
              "ZOHO_PASSWORD": "test-password"
            }
          }
          EOF

      - name: Run pytest
        run: |
          # Create a basic test file if none exists
          if [ ! -f "test_function_app.py" ]; then
            cat > test_function_app.py << 'EOF'
          import pytest
          import sys
          import os

          # Add the current directory to the path
          sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

          def test_function_app_imports():
              """Test that function app can be imported"""
              try:
                  import function_app
                  assert True
              except ImportError as e:
                  pytest.skip(f"Import error: {e}")

          def test_azure_functions_available():
              """Test Azure Functions SDK availability"""
              try:
                  import azure.functions
                  assert True
              except ImportError:
                  pytest.skip("Azure Functions SDK not available")
          EOF
          fi

          # Run pytest with coverage
          pytest -v --cov=. --cov-report=xml --cov-report=term
        continue-on-error: true

      - name: Upload Python coverage
        uses: actions/upload-artifact@v4
        with:
          name: functions-coverage
          path: ./coverage.xml
          retention-days: 7
        continue-on-error: true

      - name: Package Azure Functions
        run: |
          # Create deployment package
          zip -r ../azure-functions-package.zip . \
            -x "*.pyc" \
            -x "__pycache__/*" \
            -x ".git*" \
            -x "local.settings.json" \
            -x "test_*.py" \
            -x ".pytest_cache/*" \
            -x "coverage.xml"

          # Verify package
          ls -la ../azure-functions-package.zip
          echo "Package size: $(du -h ../azure-functions-package.zip | cut -f1)"

      - name: Upload Azure Functions artifacts
        uses: actions/upload-artifact@v4
        with:
          name: azure-functions-package
          path: ./azure-functions-package.zip
          retention-days: 1

  # Deploy Azure Functions
  deploy-functions:
    name: Deploy Azure Functions
    runs-on: ubuntu-latest
    needs: [test-frontend, test-functions]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Download functions package
        uses: actions/download-artifact@v4
        with:
          name: azure-functions-package

      - name: Deploy to Azure Functions
        uses: Azure/functions-action@v1
        with:
          app-name: ${{ env.AZURE_FUNCTIONAPP_NAME }}
          package: azure-functions-package.zip
          publish-profile: ${{ secrets.AZURE_FUNCTIONAPP_PUBLISH_PROFILE }}

  # Deploy Frontend
  deploy-frontend:
    name: Package Frontend for Deployment
    runs-on: ubuntu-latest
    needs: [test-frontend, test-functions]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Download frontend build
        uses: actions/download-artifact@v4
        with:
          name: frontend-build
          path: ./dist

      - name: Create deployment package
        run: |
          tar -czf tcdynamics-frontend.tar.gz -C ./dist .
          echo "Package created: $(du -h tcdynamics-frontend.tar.gz | cut -f1)"

      - name: Upload deployment package
        uses: actions/upload-artifact@v4
        with:
          name: ovhcloud-deployment
          path: tcdynamics-frontend.tar.gz
          retention-days: 30

      - name: Deployment instructions
        run: |
          echo "ðŸ“¦ Frontend package ready for OVHcloud deployment"
          echo "Download the artifact 'ovhcloud-deployment' and upload via FileZilla"
          echo "Target: https://tcdynamics.fr"

  # Summary
  summary:
    name: Deployment Summary
    runs-on: ubuntu-latest
    needs: [deploy-functions, deploy-frontend]
    if: always() && github.ref == 'refs/heads/main'

    steps:
      - name: Summary
        run: |
          echo "ðŸŽ‰ Deployment Summary"
          echo "===================="
          echo "Frontend Tests: ${{ needs.test-frontend.result }}"
          echo "Functions Tests: ${{ needs.test-functions.result }}"
          echo "Functions Deploy: ${{ needs.deploy-functions.result }}"
          echo "Frontend Package: ${{ needs.deploy-frontend.result }}"
