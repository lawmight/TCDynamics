# Nginx configuration for TCDynamics frontend

# HTTP to HTTPS redirect server block
server {
    listen 80;
    server_name tcdynamics.fr www.tcdynamics.fr;
    return 301 https://$server_name$request_uri;
}

# HTTPS server block
server {
    listen 443 ssl http2;
    server_name tcdynamics.fr www.tcdynamics.fr;

    # SSL/TLS configuration
    ssl_certificate /etc/letsencrypt/live/tcdynamics.fr/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/tcdynamics.fr/privkey.pem;

    # Modern TLS configuration (TLS 1.2+)
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384;
    ssl_prefer_server_ciphers off;

    # SSL session caching
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;

    # Root directory for static files
    root /usr/share/nginx/html;
    index index.html;

    # Security headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header Referrer-Policy "no-referrer-when-downgrade" always;
    # Generate CSP nonce for inline scripts/styles (if needed)
    # To implement nonces: set $csp_nonce to a base64-encoded random value per request
    # Then use: script-src 'self' 'nonce-$csp_nonce' https://trusted-cdn.com

    # CSP Nonce implementation for nginx:
    # To enable nonces, install ngx_http_set_misc_module and use:
    # set $csp_nonce "nonce-$(/usr/bin/openssl rand -base64 16 | tr -d "=+/" | cut -c1-16)";
    # Then update CSP: script-src 'self' https: 'nonce-$csp_nonce'

    add_header Content-Security-Policy "default-src 'self'; script-src 'self' https:; style-src 'self' https:; img-src 'self' https: data: blob:; font-src 'self' https: data:; connect-src 'self' https:; media-src 'self' https:; object-src 'none'; base-uri 'self'; form-action 'self'; frame-ancestors 'none'" always;
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;

    # Handle client-side routing
    location / {
        try_files $uri $uri/ /index.html;

        # Cache static assets
        location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
            expires 1y;
            add_header Cache-Control "public, immutable";
            access_log off;
        }

        # API proxy to backend (if backend is on same server)
        location /api/ {
            proxy_pass http://backend:3001/;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_cache_bypass $http_upgrade;
        }
    }

    # Health check endpoint
    location /health {
        access_log off;
        return 200 "healthy\n";
        add_header Content-Type text/plain;
    }

    # Security: Don't serve dotfiles
    location ~ /\. {
        deny all;
    }

    # Error pages
    error_page 404 /index.html;
}
