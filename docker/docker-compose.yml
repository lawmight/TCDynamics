version: '3.8'

services:
  # Frontend - Nginx servant les fichiers statiques avec SSL
  frontend:
    image: nginx:alpine
    container_name: tcdynamics-frontend
    ports:
      - '${FRONTEND_PORT:-80}:80'
      - '${HTTPS_PORT:-443}:443'
    volumes:
      - ./dist:/usr/share/nginx/html:ro
      - ./nginx.conf:/etc/nginx/conf.d/default.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx-logs:/var/log/nginx
    depends_on:
      backend:
        condition: service_healthy
    restart: unless-stopped
    environment:
      - NGINX_WORKER_PROCESSES=${NGINX_WORKER_PROCESSES:-auto}
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - tcdynamics-network
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # Backend API - Node.js avec PM2
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: production
    container_name: tcdynamics-backend
    ports:
      - '${BACKEND_PORT:-8080}:8080'
    environment:
      - NODE_ENV=production
      - PORT=8080
      - LOG_LEVEL=info
      - FRONTEND_URL=${FRONTEND_URL:-http://localhost}
      - NODE_OPTIONS=--max-old-space-size=512
    env_file:
      - ./backend/.env
    volumes:
      - ./backend/logs:/app/logs
      - backend-logs:/app/logs/app
    restart: unless-stopped
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:8080/health']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - tcdynamics-network
    depends_on:
      - postgres
      - redis
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'

  # Base de donnÃ©es PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: tcdynamics-postgres
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-tcdynamics}
      - POSTGRES_USER=${POSTGRES_USER:-tcdynamics}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-changeme}
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./backend/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - '${POSTGRES_PORT:-5432}:5432'
    restart: unless-stopped
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${POSTGRES_USER:-tcdynamics}']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - tcdynamics-network

  # Redis pour le cache et les sessions
  redis:
    image: redis:7-alpine
    container_name: tcdynamics-redis
    ports:
      - '${REDIS_PORT:-6379}:6379'
    volumes:
      - redis-data:/data
      - ./redis.conf:/etc/redis/redis.conf:ro
    restart: unless-stopped
    command: redis-server /etc/redis/redis.conf
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - tcdynamics-network

  # Monitoring avec Prometheus (optionnel)
  prometheus:
    image: prom/prometheus:latest
    container_name: tcdynamics-prometheus
    ports:
      - '9090:9090'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - tcdynamics-network
    profiles:
      - monitoring

  # Grafana pour les dashboards de monitoring
  grafana:
    image: grafana/grafana:latest
    container_name: tcdynamics-grafana
    ports:
      - '3000:3000'
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
    restart: unless-stopped
    depends_on:
      - prometheus
    networks:
      - tcdynamics-network
    profiles:
      - monitoring

  # Service de backup automatique
  backup:
    image: postgres:15-alpine
    container_name: tcdynamics-backup
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-tcdynamics}
      - POSTGRES_USER=${POSTGRES_USER:-tcdynamics}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-changeme}
    volumes:
      - ./backups:/backups
      - postgres-data:/var/lib/postgresql/data:ro
    command: >
      bash -c "
        while true; do
          echo 'Creating backup...'
          pg_dump -h postgres -U ${POSTGRES_USER:-tcdynamics} ${POSTGRES_DB:-tcdynamics} > /backups/backup_$$(date +%Y%m%d_%H%M%S).sql
          echo 'Backup created successfully'
          sleep 86400  # Backup every 24 hours
        done
      "
    depends_on:
      - postgres
    restart: unless-stopped
    networks:
      - tcdynamics-network
    profiles:
      - backup

networks:
  tcdynamics-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres-data:
  redis-data:
  prometheus-data:
  grafana-data:
  nginx-logs:
  backend-logs:
