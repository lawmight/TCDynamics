name: 'CI - Pull Request Validation'

on:
  pull_request:
    branches: [main, develop]
    paths:
      - 'src/**'
      - 'backend/**'
      - 'TCDynamics/**'
      - 'package.json'
      - 'package-lock.json'
      - 'requirements.txt'
      - 'docker-compose.yml'
      - '.github/workflows/ci-pr-validation.yml'

env:
  NODE_VERSION: '20'
  PYTHON_VERSION: '3.11'

jobs:
  # Test Frontend (React/TypeScript)
  test-frontend:
    name: Test React Frontend
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint
        continue-on-error: false

      - name: Run type checking
        run: npm run type-check

      - name: Run tests
        run: npm run test:coverage
        env:
          CI: true

      - name: Build frontend
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build-pr
          path: dist
          retention-days: 1

  # Test Backend (Node.js API)
  test-backend:
    name: Test Node.js Backend
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: tcdynamics_test
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Run backend tests
        run: npm test
        env:
          NODE_ENV: test
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432
          POSTGRES_DB: tcdynamics_test
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          REDIS_HOST: localhost
          REDIS_PORT: 6379
          CI: true

      - name: Run backend linting
        run: npm run lint
        continue-on-error: false

  # Test Azure Functions (Python)
  test-functions:
    name: Test Azure Functions
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./TCDynamics

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install -r requirements.txt
          pip install pytest pytest-cov flake8

      - name: Run Python linting
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Test Azure Functions
        run: |
          # Create test environment
          echo "FUNCTIONS_WORKER_RUNTIME=python" > local.settings.json
          echo "AzureWebJobsStorage=UseDevelopmentStorage=true" >> local.settings.json

          # Run tests
          python -m pytest --cov=. --cov-report=xml
        env:
          CI: true

      - name: Test Azure Functions
        run: |
          # Create test environment
          cat > local.settings.json << EOF
          {
            "IsEncrypted": false,
            "Values": {
              "FUNCTIONS_WORKER_RUNTIME": "python",
              "AzureWebJobsStorage": "UseDevelopmentStorage=true"
            }
          }
          EOF

          # Run tests          name: Azure Functions
          fail_ci_if_error: false

  # Integration Tests (Optional - only run if both backend and functions pass)
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [test-backend, test-functions]
    if: success()

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run integration tests
        run: npm run test:integration
        env:
          CI: true
        continue-on-error: true # Don't block PRs on integration test failures initially

  # Quality Gates
  quality-gate:
    name: Quality Gate
    runs-on: ubuntu-latest
    needs: [test-frontend, test-backend, test-functions]
    if: always()

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Quality Gate Check
        run: |
          # Check if all required jobs passed
          if [[ "${{ needs.test-frontend.result }}" != "success" ]]; then
            echo "❌ Frontend tests failed"
            exit 1
          fi

          if [[ "${{ needs.test-backend.result }}" != "success" ]]; then
            echo "❌ Backend tests failed"
            exit 1
          fi

          if [[ "${{ needs.test-functions.result }}" != "success" ]]; then
            echo "❌ Functions tests failed"
            exit 1
          fi

          echo "✅ All quality gates passed!"

      - name: Comment PR on failure
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '❌ **CI Quality Gate Failed**\n\nSome tests failed. Please review the failed jobs above and fix the issues before merging.'
            })
