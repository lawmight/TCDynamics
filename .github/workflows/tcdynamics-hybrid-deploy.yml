name: TCDynamics Hybrid Deployment

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'src/**'
      - 'TCDynamics/**'
      - 'package.json'
      - 'package-lock.json'
      - 'requirements.txt'
      - '.github/workflows/tcdynamics-hybrid-deploy.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'src/**'
      - 'TCDynamics/**'
      - 'package.json'
      - 'package-lock.json'
      - 'requirements.txt'

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'
  AZURE_FUNCTIONAPP_NAME: 'func-tcdynamics-contact'
  AZURE_FUNCTIONAPP_PACKAGE_PATH: './TCDynamics'
  FRONTEND_BUILD_PATH: './dist'
  AZURE_FUNCTIONAPP_BASE_URL: 'https://func-tcdynamics-contact-bjgwe4aaaza9dpbk.francecentral-01.azurewebsites.net'

jobs:
  # Test Frontend
  test-frontend:
    name: Test React Frontend
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run linting
      run: npm run lint
      
    - name: Run type checking
      run: npm run type-check
      
    - name: Run tests
      run: npm run test:coverage
      
    - name: Build frontend
      run: npm run build
      env:
        VITE_AZURE_FUNCTIONS_URL: https://func-tcdynamics-contact-bjgwe4aaaza9dpbk.francecentral-01.azurewebsites.net/api
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build
        path: ${{ env.FRONTEND_BUILD_PATH }}
        retention-days: 1

  # Test Azure Functions
  test-functions:
    name: Test Azure Functions
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./TCDynamics
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip setuptools wheel
        # Install with constraints file to avoid version conflicts
        pip install --no-cache-dir -r requirements.txt -c constraints.txt
        pip install pytest pytest-cov
        
    - name: Run Python linting
      run: |
        pip install flake8
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        
    - name: Test Azure Functions locally
      run: |
        # Create test environment file
        echo "ZOHO_EMAIL=test@example.com" > local.settings.json
        echo "ZOHO_PASSWORD=test-password" >> local.settings.json
        echo "FUNCTIONS_WORKER_RUNTIME=python" >> local.settings.json
        echo "AzureWebJobsStorage=UseDevelopmentStorage=true" >> local.settings.json
        
        # Test function imports
        python -c "import azure.functions as func; print('Azure Functions SDK imported successfully')"
        
    - name: Package Azure Functions
      run: |
        # Check if zip is available
        if ! command -v zip &> /dev/null; then
          echo "ERROR: zip command not found"
          exit 1
        fi

        # Debug: Check current directory and contents
        pwd
        ls -la
        echo "Files to be zipped:"
        find . -name "*.py" | head -10

        # Create deployment package (simplified, no exclusions first)
        echo "Creating zip file..."
        zip -r azure-functions-package.zip . 2>&1

        # Verify the package was created
        if [ -f "azure-functions-package.zip" ]; then
          ls -la azure-functions-package.zip
          echo "Package size: $(du -h azure-functions-package.zip | cut -f1)"
          echo "SUCCESS: Zip file created successfully"
        else
          echo "ERROR: Zip file was not created"
          echo "Zip command exit code: $?"
          exit 1
        fi

    - name: Upload Azure Functions artifacts
      uses: actions/upload-artifact@v4
      with:
        name: azure-functions-package
        path: TCDynamics/azure-functions-package.zip
        retention-days: 1
        if-no-files-found: error

  # Deploy Azure Functions
  deploy-functions:
    name: Deploy Azure Functions
    runs-on: ubuntu-latest
    needs: [test-frontend, test-functions]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Package Azure Functions for deployment
      run: |
        cd TCDynamics
        # Create deployment package
        zip -r ../azure-functions-package.zip . -x "*.pyc" "__pycache__/*" "*.git*" "local.settings.json"
        cd ..
        ls -la azure-functions-package.zip

    - name: Extract Azure Functions package
      run: |
        unzip azure-functions-package.zip -d azure-functions-deploy
        ls -la azure-functions-deploy/

    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install Azure Functions Core Tools
      run: |
        npm install -g azure-functions-core-tools@4 --unsafe-perm true

    - name: Login to Azure
      uses: azure/login@v2
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Deploy to Azure Functions
      uses: Azure/functions-action@v1
      with:
        app-name: ${{ env.AZURE_FUNCTIONAPP_NAME }}
        package: ./azure-functions-deploy
        publish-profile: ${{ secrets.AZURE_FUNCTIONAPP_PUBLISH_PROFILE }}
        scm-do-build-during-deployment: true
        enable-oryx-build: true

    # Alternative OIDC-based deployment (recommended for security)
    # Uncomment the following and comment out the above deployment step
    # when you have OIDC configured in Azure
    #
    # - name: Deploy to Azure Functions (OIDC)
    #   uses: Azure/functions-action@v1
    #   with:
    #     app-name: ${{ env.AZURE_FUNCTIONAPP_NAME }}
    #     package: ./azure-functions-deploy
    #     # Remove publish-profile when using OIDC
        
    - name: Verify deployment
      run: |
        echo "Verifying Azure Functions deployment..."
        curl -f ${{ env.AZURE_FUNCTIONAPP_BASE_URL }}/api/health || exit 1
        echo "‚úÖ Azure Functions deployed successfully!"

  # Deploy Frontend to OVHcloud
  deploy-frontend:
    name: Deploy Frontend to OVHcloud
    runs-on: ubuntu-latest
    needs: [test-frontend, deploy-functions]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download frontend artifacts
      uses: actions/download-artifact@v4
      with:
        name: frontend-build
        path: ${{ env.FRONTEND_BUILD_PATH }}
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: Create OVHcloud deployment package
      run: |
        # Create a deployment package for OVHcloud
        tar -czf tcdynamics-frontend.tar.gz -C ${{ env.FRONTEND_BUILD_PATH }} .
        
    - name: Deploy to OVHcloud
      run: |
        echo "üöÄ Deploying frontend to OVHcloud..."
        echo "üì¶ Deployment package created: tcdynamics-frontend.tar.gz"
        echo "üìÅ Package size: $(du -h tcdynamics-frontend.tar.gz | cut -f1)"
        echo ""
        echo "üìã Manual deployment steps for OVHcloud:"
        echo "1. Upload tcdynamics-frontend.tar.gz to your OVHcloud hosting"
        echo "2. Extract the files to your web directory"
        echo "3. Configure your web server to serve the React app"
        echo "4. Set up SSL certificate if not already configured"
        echo ""
        echo "üîó Frontend will be available at: https://tcdynamics.fr"
        echo "üîó Backend API: https://func-tcdynamics-contact.azurewebsites.net/api"
        
    - name: Upload OVHcloud deployment package
      uses: actions/upload-artifact@v4
      with:
        name: ovhcloud-deployment-package
        path: tcdynamics-frontend.tar.gz
        retention-days: 7

  # Cleanup and Notifications
  cleanup:
    name: Cleanup and Notifications
    runs-on: ubuntu-latest
    needs: [deploy-functions, deploy-frontend]
    if: always() && github.ref == 'refs/heads/main'
    
    steps:
    - name: Deployment Summary
      run: |
        echo "üéâ TCDynamics Hybrid Deployment Summary"
        echo "======================================"
        echo ""
        echo "üìÖ Deployment Date: $(date)"
        echo "üîó Repository: ${{ github.repository }}"
        echo "üåø Branch: ${{ github.ref_name }}"
        echo "üìù Commit: ${{ github.sha }}"
        echo ""
        echo "‚úÖ Components Deployed:"
        echo "  ‚Ä¢ React Frontend ‚Üí OVHcloud (https://tcdynamics.fr)"
        echo "  ‚Ä¢ Azure Functions ‚Üí func-tcdynamics-contact"
        echo ""
        echo "üîß Environment Variables Required:"
        echo "  ‚Ä¢ ZOHO_EMAIL (Azure Functions)"
        echo "  ‚Ä¢ ZOHO_PASSWORD (Azure Functions)"
        echo "  ‚Ä¢ VITE_AZURE_FUNCTIONS_URL (Frontend)"
        echo ""
        echo "üìä Deployment Status:"
        echo "  ‚Ä¢ Frontend Tests: ${{ needs.deploy-frontend.result }}"
        echo "  ‚Ä¢ Functions Tests: ${{ needs.deploy-functions.result }}"
        echo "  ‚Ä¢ Functions Deploy: ${{ needs.deploy-functions.result }}"
        echo "  ‚Ä¢ Frontend Deploy: ${{ needs.deploy-frontend.result }}"
        
    - name: Notify on Failure
      if: failure()
      run: |
        echo "‚ùå Deployment failed!"
        echo "Please check the logs and fix any issues before retrying."
        exit 1

