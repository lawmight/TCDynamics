name: 'Security Scan'

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    # Run weekly on Monday at 2 AM UTC
    - cron: '0 2 * * 1'
  workflow_dispatch:

env:
  NODE_VERSION: '20'
  PYTHON_VERSION: '3.11'

jobs:
  # CodeQL Security Analysis
  codeql-analysis:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: ['javascript', 'python']
        # CodeQL supports [ 'cpp', 'csharp', 'go', 'java', 'javascript', 'python', 'ruby' ]
        # Learn more about CodeQL language support at https://aka.ms/codeql-docs/language-support

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          # If you wish to specify custom queries, you can do so here or in a config file.
          # By default, queries listed here will override any specified in a config file.
          # Prefix the list here with "+" to use these queries and those in the config file.

          # Details on CodeQL's query packs refer to : https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/configuring-code-scanning#using-queries-in-ql-packs
          # queries: security-extended,security-and-quality

      - name: Setup Node.js for JavaScript
        if: matrix.language == 'javascript'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Setup Python for Python analysis
        if: matrix.language == 'python'
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies for JavaScript
        if: matrix.language == 'javascript'
        run: |
          npm ci
          cd backend && npm ci

      - name: Install dependencies for Python
        if: matrix.language == 'python'
        run: |
          cd TCDynamics
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: '/language:${{matrix.language}}'

  # Snyk Security Scan
  snyk-security:
    name: Snyk Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || github.event_name == 'push' || github.event_name == 'schedule'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install backend dependencies
        run: |
          cd backend
          npm ci

      - name: Run Snyk to check for vulnerabilities in root dependencies
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high --fail-on=upgradable

      - name: Run Snyk to check for vulnerabilities in backend dependencies
        working-directory: backend
        run: npx snyk test --severity-threshold=high --fail-on=upgradable
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

      - name: Setup Snyk CLI
        uses: snyk/actions/setup@master

      - name: Run Snyk for Python dependencies
        run: |
          cd TCDynamics
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          snyk monitor --file=requirements.txt --skip-unresolved
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

      - name: Run Snyk Infrastructure as Code (IaC) scan
        uses: snyk/actions/iac@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          file: backend/Dockerfile,Dockerfile.frontend
          command: test
          sarif: true

  # Container Image Security Scan
  container-security:
    name: Container Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'schedule'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Docker buildx
        uses: docker/setup-buildx-action@v3

      - name: Build backend image for scanning
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          tags: tcdynamics-backend:scan
          load: true
          cache-from: type=gha
          cache-to: type=gha,mode=max
          push: false

      - name: Build frontend image for scanning
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.frontend
          tags: tcdynamics-frontend:scan
          load: true
          cache-from: type=gha
          cache-to: type=gha,mode=max
          push: false

      - name: Check if Docker images exist
        run: |
          docker images | grep tcdynamics || echo "No tcdynamics images found"

      - name: Scan backend image with Trivy
        uses: aquasecurity/trivy-action@master
        continue-on-error: true
        with:
          scan-type: 'image'
          scan-ref: 'tcdynamics-backend:scan'
          format: 'sarif'
          output: 'trivy-backend-results.sarif'
          severity: 'HIGH,CRITICAL'

      - name: Scan frontend image with Trivy
        uses: aquasecurity/trivy-action@master
        continue-on-error: true
        with:
          scan-type: 'image'
          scan-ref: 'tcdynamics-frontend:scan'
          format: 'sarif'
          output: 'trivy-frontend-results.sarif'
          severity: 'HIGH,CRITICAL'

      - name: Verify SARIF files exist
        run: |
          echo "Checking for SARIF files:"
          ls -la trivy-*.sarif || echo "SARIF files not found in current directory"
          find . -name "trivy-*.sarif" -type f -exec ls -la {} \; || echo "No SARIF files found in workspace"

      - name: Create empty SARIF files if scans failed
        run: |
          ls -la trivy-*.sarif || true
          echo '{"$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json", "version": "2.1.0", "runs": []}' > trivy-backend-results.sarif
          echo '{"$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json", "version": "2.1.0", "runs": []}' > trivy-frontend-results.sarif
          ls -la trivy-*.sarif

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: |
            trivy-backend-results.sarif
            trivy-frontend-results.sarif

  # Dependency Review for Pull Requests
  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Dependency Review
        uses: actions/dependency-review-action@v4
        with:
          # Optional: add configuration for vulnerability and license checks
          config-file: '.github/dependency-review-config.yml'

  # License Compliance Check
  license-check:
    name: License Compliance
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Check licenses
        run: npx license-checker --production --onlyAllow="MIT;ISC;BSD-3-Clause;BSD-2-Clause;Apache-2.0;CC0-1.0;UNLICENSED;Proprietary" --excludePackages=""

      - name: Check backend licenses
        run: |
          cd backend
          npx license-checker --production --onlyAllow="MIT;ISC;BSD-3-Clause;BSD-2-Clause;Apache-2.0;CC0-1.0;UNLICENSED;Proprietary" --excludePackages=""

  # Secrets Detection
  secrets-detection:
    name: Secrets Detection
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run TruffleHog OSS
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.pull_request.base.ref || 'HEAD~1' }}
          head: HEAD
          extra_args: --debug --only-verified

  # Security Audit Summary
  security-summary:
    name: Security Audit Summary
    runs-on: ubuntu-latest
    permissions:
      issues: write
      contents: read
    needs:
      [
        codeql-analysis,
        snyk-security,
        container-security,
        dependency-review,
        license-check,
        secrets-detection,
      ]
    if: always()

    steps:
      - name: Security Scan Summary
        run: |
          echo "üîí Security Scan Summary"
          echo "======================="
          echo ""
          echo "üìÖ Scan Date: $(date)"
          echo "üîó Repository: ${{ github.repository }}"
          echo "üåø Branch: ${{ github.ref_name }}"
          echo "üìù Commit: ${{ github.sha }}"
          echo ""
          echo "üîç Scan Results:"
          echo "  ‚Ä¢ CodeQL Analysis: ${{ needs.codeql-analysis.result }}"
          echo "  ‚Ä¢ Snyk Security: ${{ needs.snyk-security.result }}"
          echo "  ‚Ä¢ Container Security: ${{ needs.container-security.result }}"
          echo "  ‚Ä¢ Dependency Review: ${{ needs.dependency-review.result }}"
          echo "  ‚Ä¢ License Check: ${{ needs.license-check.result }}"
          echo "  ‚Ä¢ Secrets Detection: ${{ needs.secrets-detection.result }}"
          echo ""
          echo "üìä Recommendations:"
          echo "  ‚Ä¢ Check Security tab for detailed findings"
          echo "  ‚Ä¢ Review Snyk dashboard for dependency vulnerabilities"
          echo "  ‚Ä¢ Address any high/critical severity issues"
          echo "  ‚Ä¢ Consider adding security policies for your repository"

      - name: Create security issue on high findings
        if: contains(needs.*.result, 'failure')
        uses: actions/github-script@v7
        with:
          script: |
            const title = 'üö® Security Scan Found Issues'
            const body = `
            ## Security Scan Alert

            One or more security scans detected potential issues:

            - **CodeQL**: ${{ needs.codeql-analysis.result }}
            - **Snyk**: ${{ needs.snyk-security.result }}
            - **Container Scan**: ${{ needs.container-security.result }}
            - **Dependency Review**: ${{ needs.dependency-review.result }}
            - **License Check**: ${{ needs.license-check.result }}
            - **Secrets**: ${{ needs.secrets-detection.result }}

            Please review the security scan results and address any high/critical findings.

            üîó [View Security Tab](${{ github.server_url }}/${{ github.repository }}/security)
            üîó [View Workflow Run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
            `

            // Check if issue already exists
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ['security', 'automated'],
              state: 'open'
            })

            const existingIssue = issues.data.find(issue => issue.title === title)

            if (!existingIssue) {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: title,
                body: body,
                labels: ['security', 'automated', 'high-priority']
              })
            }

      - name: Notify on critical security findings
        if: contains(needs.*.result, 'failure') && env.SLACK_WEBHOOK_URL != ''
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: 'üö® Security scan detected potential issues in ${{ github.repository }}'
          fields: repo,message,commit,author,action,eventName,ref,workflow
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
