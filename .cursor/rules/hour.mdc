# Cursor Rules for Accurate Date/Time Handling

## üïê Date and Time Accuracy Rules

### CRITICAL: Always Use Dynamic Date/Time
- **NEVER hardcode dates or timestamps** - Always fetch current date/time dynamically
- **ALWAYS use system commands** to get accurate current date/time
- **NEVER assume or guess the current date** - AI models have no intrinsic date awareness

### Current Date/Time Context
- Use system commands like `date` (Unix/Mac) or `Get-Date` (PowerShell) to get current date/time
- When creating files, migrations, documentation, or any timestamped content, ALWAYS fetch current date/time
- Format dates consistently as YYYY-MM-DD for dates and YYYY-MM-DD HH:MM:SS for timestamps
- Include timezone information when relevant (use UTC as default for system operations)

### Time Zone Handling
- **Default to UTC** for system operations, logging, and database timestamps
- **Use user's local timezone** for user-facing content and documentation
- **Always specify timezone** when dealing with international operations or multi-region systems
- Use `convert_time` tool for timezone conversions when needed

### Date Format Standards
- **ISO 8601 format**: YYYY-MM-DD for dates, YYYY-MM-DD HH:MM:SS for timestamps
- **24-hour format** for consistency across all time displays
- **Include timezone information** when relevant (e.g., "2024-01-15 14:30:00 UTC")
- **Use consistent separators**: hyphens for dates, colons for times

## üìÅ File and Migration Naming
- **Database migrations**: Use format `YYYYMMDD_HHMMSS_description.sql`
- **Version files**: Include current date in version strings
- **Documentation**: Always include "Last updated" timestamps using current date
- **Log files**: Use timestamp-based naming when creating log files

## üîß Implementation Examples

### Database Migrations
```
When creating database migrations:
1. Use system command to get current timestamp
2. Format as YYYYMMDD_HHMMSS for migration names
3. Include timezone information in migration comments
4. Example: 20240115_143000_add_user_table.sql
```

### Documentation Updates
```
When updating documentation:
1. Always refresh "Last updated" timestamps using current date
2. Use current date for version information
3. Include timezone for international teams
4. Format: "Last updated: 2024-01-15 14:30:00 UTC"
```

### Code Comments and Metadata
```
When adding timestamps to code:
1. Use current date/time from system
2. Include timezone information
3. Format consistently across all files
4. Example: "Created: 2024-01-15 14:30:00 UTC"
```

## ‚ö†Ô∏è Common Mistakes to Avoid
- **NEVER use hardcoded dates** like "2023-12-01" or "Dec 2024"
- **NEVER assume current year** - always fetch dynamically
- **NEVER use ambiguous date formats** like MM/DD/YYYY
- **NEVER skip timezone information** for international operations
- **NEVER use relative dates** like "tomorrow" without current date context

## üåç International Considerations
- **UTC for system operations** - databases, APIs, logging
- **Local timezone for user content** - documentation, user-facing timestamps
- **Explicit timezone conversion** when dealing with multiple regions
- **DST awareness** - the MCP time server handles DST transitions automatically

## üîÑ Workflow Integration
- **Before creating any timestamped content**: Use system commands to get current date/time
- **When updating existing content**: Refresh timestamps using current date/time
- **For scheduled operations**: Use current system time for accurate scheduling
- **For timezone conversions**: Use system timezone utilities or online converters

## üìã Validation Checklist
Before generating any date/time content, verify:
- [ ] Used system commands to get current date/time
- [ ] Applied consistent formatting (ISO 8601)
- [ ] Included appropriate timezone information
- [ ] Avoided hardcoded dates
- [ ] Used 24-hour format for times
- [ ] Included timezone for international operations

## üöÄ Best Practices Summary
1. **Always fetch current date/time dynamically** using system commands
2. **Use consistent ISO 8601 formatting** across all content
3. **Include timezone information** when relevant
4. **Default to UTC** for system operations
5. **Use local timezone** for user-facing content
6. **Refresh timestamps** when updating content
7. **Validate date formats** before finalizing content

Remember: Always fetch current date/time dynamically from the system. Never hardcode dates or assume current time - always get it from the system!

