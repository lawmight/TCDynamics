{
  "version": "2.0.0",
  "tasks": [
    {
      "type": "shell",
      "label": "func: host start",
      "command": "func host start",
      "windows": {
        "command": "func host start"
      },
      "osx": {
        "command": "func host start"
      },
      "linux": {
        "command": "func host start"
      },
      "problemMatcher": [],
      "isBackground": true,
      "dependsOn": "pip install (functions)",
      "options": {
        "cwd": "${workspaceFolder}/TCDynamics"
      }
    },
    {
      "type": "shell",
      "label": "func: host start (debug)",
      "command": "func host start",
      "windows": {
        "command": "func host start"
      },
      "osx": {
        "command": "func host start"
      },
      "linux": {
        "command": "func host start"
      },
      "args": [
        "--language-worker",
        "--workerId",
        "python",
        "--requestId",
        "debug",
        "--debug"
      ],
      "env": {
        "languageWorkers__python__arguments": "--debug"
      },
      "problemMatcher": [],
      "isBackground": true,
      "dependsOn": "pip install (functions)",
      "options": {
        "cwd": "${workspaceFolder}/TCDynamics"
      }
    },
    {
      "label": "pip install (functions)",
      "type": "shell",
      "osx": {
        "command": "${config:azureFunctions.pythonVenv}/bin/python -m pip install -r requirements.txt"
      },
      "windows": {
        "command": "${config:azureFunctions.pythonVenv}\\Scripts\\python -m pip install -r requirements.txt"
      },
      "linux": {
        "command": "${config:azureFunctions.pythonVenv}/bin/python -m pip install -r requirements.txt"
      },
      "problemMatcher": [],
      "options": {
        "cwd": "${workspaceFolder}/TCDynamics"
      }
    },
    {
      "label": "Deploy to Azure Functions",
      "type": "shell",
      "command": "func azure functionapp publish func-tcdynamics-contact",
      "windows": {
        "command": "func azure functionapp publish func-tcdynamics-contact"
      },
      "osx": {
        "command": "func azure functionapp publish func-tcdynamics-contact"
      },
      "linux": {
        "command": "func azure functionapp publish func-tcdynamics-contact"
      },
      "problemMatcher": [],
      "dependsOn": "pip install (functions)",
      "options": {
        "cwd": "${workspaceFolder}/TCDynamics"
      },
      "group": {
        "kind": "build",
        "isDefault": true
      }
    },
    {
      "label": "Deploy Frontend to OVHcloud",
      "type": "shell",
      "command": "echo 'Deploying frontend files to OVHcloud...' && echo 'Please upload these files to your OVHcloud hosting:' && echo '  - index.html' && echo '  - style.css' && echo '  - script.js' && echo '  - README.md'",
      "windows": {
        "command": "echo 'Deploying frontend files to OVHcloud...' && echo 'Please upload these files to your OVHcloud hosting:' && echo '  - index.html' && echo '  - style.css' && echo '  - script.js' && echo '  - README.md'"
      },
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "shared",
        "showReuseMessage": true,
        "clear": false
      },
      "group": "build"
    },
    {
      "label": "Full Deployment (Backend + Frontend)",
      "dependsOrder": "sequence",
      "dependsOn": ["Deploy to Azure Functions", "Deploy Frontend to OVHcloud"],
      "group": {
        "kind": "build",
        "isDefault": false
      }
    },
    {
      "label": "Test Local Development",
      "type": "shell",
      "command": "python -m http.server 8000",
      "windows": {
        "command": "python -m http.server 8000"
      },
      "options": {
        "cwd": "${workspaceFolder}/TCDynamics"
      },
      "isBackground": true,
      "problemMatcher": [],
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "shared",
        "showReuseMessage": true,
        "clear": false
      },
      "group": "test"
    },
    {
      "label": "Git: Commit and Push",
      "type": "shell",
      "command": "git add . && git commit -m \"Auto-deploy: $(date)\" && git push",
      "windows": {
        "command": "git add . && git commit -m \"Auto-deploy: %date% %time%\" && git push"
      },
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "shared",
        "showReuseMessage": true,
        "clear": false
      }
    },
    {
      "label": "Frontend: Install Dependencies",
      "type": "shell",
      "command": "npm install",
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "shared"
      },
      "problemMatcher": []
    },
    {
      "label": "Frontend: Start Development Server",
      "type": "shell",
      "command": "npm run dev",
      "group": "build",
      "isBackground": true,
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "shared"
      },
      "problemMatcher": []
    },
    {
      "label": "Frontend: Build for Production",
      "type": "shell",
      "command": "npm run build",
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "shared"
      },
      "problemMatcher": []
    },
    {
      "label": "Frontend: Run Tests",
      "type": "shell",
      "command": "npm test",
      "group": "test",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "shared"
      },
      "problemMatcher": []
    },
    {
      "label": "Frontend: Lint Code",
      "type": "shell",
      "command": "npm run lint",
      "group": "test",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "shared"
      },
      "problemMatcher": []
    },
    {
      "label": "Backend: Install Dependencies",
      "type": "shell",
      "command": "npm install",
      "group": "build",
      "options": {
        "cwd": "${workspaceFolder}/backend"
      },
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "shared"
      },
      "problemMatcher": []
    },
    {
      "label": "Backend: Start Development Server",
      "type": "shell",
      "command": "npm run dev",
      "group": "build",
      "isBackground": true,
      "options": {
        "cwd": "${workspaceFolder}/backend"
      },
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "shared"
      },
      "problemMatcher": []
    },
    {
      "label": "Backend: Run Tests",
      "type": "shell",
      "command": "npm test",
      "group": "test",
      "options": {
        "cwd": "${workspaceFolder}/backend"
      },
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "shared"
      },
      "problemMatcher": []
    },
    {
      "label": "Backend: Lint Code",
      "type": "shell",
      "command": "npm run lint",
      "group": "test",
      "options": {
        "cwd": "${workspaceFolder}/backend"
      },
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "shared"
      },
      "problemMatcher": []
    },
    {
      "label": "Docker: Build Frontend",
      "type": "shell",
      "command": "docker build -t tcdynamics-frontend .",
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "shared"
      },
      "problemMatcher": []
    },
    {
      "label": "Docker: Build Backend",
      "type": "shell",
      "command": "docker build -t tcdynamics-backend ./backend",
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "shared"
      },
      "problemMatcher": []
    },
    {
      "label": "Docker: Compose Up",
      "type": "shell",
      "command": "docker-compose up -d",
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "shared"
      },
      "problemMatcher": []
    },
    {
      "label": "Docker: Compose Down",
      "type": "shell",
      "command": "docker-compose down",
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "shared"
      },
      "problemMatcher": []
    },
    {
      "label": "MCP: Start NIA Server",
      "type": "shell",
      "command": "cursor-mcp",
      "group": "build",
      "isBackground": true,
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "shared"
      },
      "problemMatcher": []
    },
    {
      "label": "Pre-commit: Run Checks",
      "type": "shell",
      "command": "npm run pre-commit",
      "group": "test",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "shared"
      },
      "problemMatcher": []
    },
    {
      "label": "Full Development Setup",
      "dependsOrder": "parallel",
      "dependsOn": [
        "Frontend: Install Dependencies",
        "Backend: Install Dependencies",
        "pip install (functions)"
      ],
      "group": {
        "kind": "build",
        "isDefault": true
      }
    }
  ]
}
